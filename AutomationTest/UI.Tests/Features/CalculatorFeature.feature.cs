// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UI.Tests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("CalculatorFeature", Description="\t In order to avoid silly mistakes \r\n\tAs a math idiot\r\n\tI want to be told the sum" +
        " of two numbers", SourceFile="Features\\CalculatorFeature.feature", SourceLine=0)]
    public partial class CalculatorFeatureFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "CalculatorFeature.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "CalculatorFeature", "\t In order to avoid silly mistakes \r\n\tAs a math idiot\r\n\tI want to be told the sum" +
                    " of two numbers", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void DivideTwoNumbersAtUILevel(string number1, string number2, string result, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Browser_Chrome",
                    "UILevel"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Divide Two Numbers at UI level", @__tags);
#line 9
this.ScenarioSetup(scenarioInfo);
#line 10
 testRunner.Given("I navigated to /", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 11
 testRunner.And(string.Format("I have entered {0} into Numerator calculator", number1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 12
 testRunner.And(string.Format("I have entered {0} into Denominator calculator", number2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 13
 testRunner.When("I press divide", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 14
 testRunner.Then(string.Format("the result should be {0} on the screen", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Divide Two Numbers at UI level, Number is positive, 18", new string[] {
                "Browser_Chrome",
                "UILevel"}, SourceLine=17)]
        public virtual void DivideTwoNumbersAtUILevel_NumberIsPositive_18()
        {
#line 9
this.DivideTwoNumbersAtUILevel("18", "3", "6", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Divide Two Numbers at UI level, Number is positive, 32.60", new string[] {
                "Browser_Chrome",
                "UILevel"}, SourceLine=17)]
        public virtual void DivideTwoNumbersAtUILevel_NumberIsPositive_32_60()
        {
#line 9
this.DivideTwoNumbersAtUILevel("32.60", "2.00", "16.30", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Divide Two Numbers at UI level, Number is positive, 10.45", new string[] {
                "Browser_Chrome",
                "UILevel"}, SourceLine=17)]
        public virtual void DivideTwoNumbersAtUILevel_NumberIsPositive_10_45()
        {
#line 9
this.DivideTwoNumbersAtUILevel("10.45", "2.3509", "4.4451061295674", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Divide Two Numbers at UI level, Number is negative, 0", new string[] {
                "Browser_Chrome",
                "UILevel"}, SourceLine=17)]
        public virtual void DivideTwoNumbersAtUILevel_NumberIsNegative_0()
        {
#line 9
this.DivideTwoNumbersAtUILevel("0", "0", "NaN", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Divide Two Numbers at UI level, Number is negative, A", new string[] {
                "Browser_Chrome",
                "UILevel"}, SourceLine=17)]
        public virtual void DivideTwoNumbersAtUILevel_NumberIsNegative_A()
        {
#line 9
this.DivideTwoNumbersAtUILevel("A", "B", "NaN", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Divide Two Numbers at UI level, Number is negative, -1", new string[] {
                "Browser_Chrome",
                "UILevel"}, SourceLine=17)]
        public virtual void DivideTwoNumbersAtUILevel_NumberIsNegative_1()
        {
#line 9
this.DivideTwoNumbersAtUILevel("-1", "0", "-∞", ((string[])(null)));
#line hidden
        }
        
        public virtual void DivideTwoNumbersAtApiLevel(string number1, string number2, string result, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Browser_Chrome",
                    "APILevel"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Divide Two Numbers at Api level", @__tags);
#line 31
this.ScenarioSetup(scenarioInfo);
#line 32
 testRunner.Given("I navigated to /", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 33
 testRunner.And(string.Format("I have entered {0} into Numerator calculator", number1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 34
 testRunner.And(string.Format("I have entered {0} into Denominator calculator", number2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 35
 testRunner.When("I press divide", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 36
 testRunner.Then(string.Format("the result should be {0} on the screen", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Divide Two Numbers at Api level, Number is positive, 24", new string[] {
                "Browser_Chrome",
                "APILevel"}, SourceLine=39)]
        public virtual void DivideTwoNumbersAtApiLevel_NumberIsPositive_24()
        {
#line 31
this.DivideTwoNumbersAtApiLevel("24", "6", "4", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
